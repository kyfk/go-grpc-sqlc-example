// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package user

import (
	"context"
	"database/sql"
)

const create = `-- name: Create :execresult
INSERT INTO users (id, username, password) VALUES (?, ?, ?)
`

type CreateParams struct {
	ID       string
	Username string
	Password []byte
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, create, arg.ID, arg.Username, arg.Password)
}

const delete = `-- name: Delete :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) Delete(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, delete, id)
	return err
}

const get = `-- name: Get :one
SELECT id, username, password, created_at, updated_at FROM users
WHERE id = ?
`

func (q *Queries) Get(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, get, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const update = `-- name: Update :exec
UPDATE users
SET username = ?, password = ?
WHERE id = ?
`

type UpdateParams struct {
	Username string
	Password []byte
	ID       string
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) error {
	_, err := q.db.ExecContext(ctx, update, arg.Username, arg.Password, arg.ID)
	return err
}
